{"version":3,"file":"static/js/174.80110d80.chunk.js","mappings":"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","sources":["components/Application/ContactForm/ContactForm.js","webpack://goit-react-hw-08-phonebook/./src/components/Application/ContactList/ContactList.module.css?0eb7","webpack://goit-react-hw-08-phonebook/./src/components/Application/ContactItem/ContactItem.module.css?732a","components/Application/ContactItem/ContactItem.js","components/Application/ContactList/ContactList.js","webpack://goit-react-hw-08-phonebook/./src/components/Application/Filter/Filter.module.css?53d4","components/Application/Filter/Filter.js","webpack://goit-react-hw-08-phonebook/./src/components/Application/Container/Container.module.css?bbe5","components/Application/Container/Container.js","components/Application/Application.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Application/ContactForm/ContactForm.module.css?0294","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/contacts/contactsSlice';\nimport { addContact } from 'redux/contacts/contactsOperation';\nimport { nanoid } from 'nanoid'\n\nimport { Loader } from '../Loader/Loader';\nimport { toast } from 'react-toastify';\n\nimport style from './ContactForm.module.css';\n\nconst ContactForm = () => {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n        \n        switch (name) {\n            case 'name':\n                setName(value)\n                break;\n            case 'number':\n                setNumber(value)\n                break;\n          default:\n        }\n    }\n\n    const dispatch = useDispatch();\n    const {items, addingLoader} = useSelector(getContacts);\n\n    const contactAlreadyExists = (name, number) => {\n        return items.find((item) => item.name.toLocaleLowerCase() === name.toLocaleLowerCase() || item.number === number);\n    }\n\n    const addContactToList = (id, name, number) => {\n        if (contactAlreadyExists(name, number)) {\n            return toast.error(`${name} ${number} is already in Phonebook`)\n        }\n\n      dispatch(addContact({ id, name, number }));\n      setName('')\n      setNumber('')\n    }\n\n    const onFormSubmit = (e) => {\n        e.preventDefault();\n\n        addContactToList(nanoid(), name, number);\n    }\n\n    const nameId = nanoid();\n    const numberId = nanoid();\n\n  return (\n    <form onSubmit={onFormSubmit}>\n      <label className={style.form} htmlFor={nameId}>Name</label>\n        <input\n          id={nameId}\n          onChange={handleInputChange}\n          value={name}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          className={style.input}\n        />\n        <label htmlFor={numberId}>Number</label>\n        <input\n          id={numberId}\n          onChange={handleInputChange}\n          value={number}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          className={style.input}\n      />\n      {addingLoader ?\n        <Loader /> :\n        <button type='submit' className={style.addButton} disabled={number && name ? false : true}>Add contact</button>\n      }\n    </form>\n  );\n}\n\nexport default ContactForm;","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__cwWB8\"};","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"ContactItem_contact__f9iqC\",\"deleteButton\":\"ContactItem_deleteButton__emLr1\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperation';\nimport style from './ContactItem.module.css';\n\nconst ContactItem = ({ data }) => {\n  const dispatch = useDispatch();\n  const { id, name, number } = data;\n  const onDeleteClick = (e, id) => {\n    if (id === e.target.id) {\n      e.target.textContent = 'Deleting...';\n      e.target.setAttribute('disabled', 'true');\n    }\n    dispatch(deleteContact(id))\n  }\n\n  return (\n    <li className={style.contact}>\n      <p>{name}: {number}</p>\n      <button type='button' id={id} onClick={(e) => onDeleteClick(e, id)} className={style.deleteButton}>Delete</button>\n    </li>\n  );\n}\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n    data: PropTypes.objectOf(PropTypes.string.isRequired,),\n}","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contactsOperation'\nimport { getContacts } from 'redux/contacts/contactsSlice';\nimport { getFilter } from 'redux/filterSlice';\nimport style from './ContactList.module.css';\nimport ContactItem from '../ContactItem/ContactItem';\nimport { Loader } from '../Loader/Loader';\n\nconst ContactList = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    const {items, error, isLoading} = useSelector(getContacts);\n    const filter = useSelector(getFilter);\n\n    const getFilteredContacts = () => {\n        if (!filter) {\n            return items;\n        }\n        \n        return items.filter(({name}) => name.toLocaleLowerCase().includes(filter.toLocaleLowerCase()))\n    }\n\n    const contactsToRender = getFilteredContacts()\n\n    return <ul className={style.list}>\n        {isLoading ? <div><Loader /></div> :\n        contactsToRender.map(item =>\n            <ContactItem key={item.id} data={item} />)}\n        {error && <div>Something went wrong, please, try again</div>}\n    </ul>\n}\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Filter_input__af3YY\"};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { setFilter } from 'redux/filterSlice';\nimport styles from \"./Filter.module.css\"\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(state => state.filter);\n\n  const onFilterChange = e => {\n    dispatch(setFilter(e.currentTarget.value.toLowerCase()));\n  };\n\n    const filterId = nanoid();\n\n  return (\n    <label htmlFor={filterId}>\n      Find contacts by name:\n      <input\n        id={filterId}\n        onChange={onFilterChange}\n        value={filterValue}\n        type=\"text\"\n        name=\"filter\"\n        className={styles.input}\n      />\n    </label>\n  );\n}\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Container_container__V1Wdt\"};","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport styles from './Container.module.css'\n\nconst Container = ({ children }) => (\n  <div className={styles.container}>{children}</div>\n);\n\nexport default Container;\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};","import ContactForm from './ContactForm/ContactForm';\nimport ContactList from './ContactList/ContactList';\nimport Filter from './Filter/Filter';\nimport Container from './Container/Container';\n\nconst Application = () => {\n  return (\n    <>\n      <Container>\n        <h1>Phonebook</h1>\n        <ContactForm />\n\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </Container>\n    </>\n  );\n};\n\nexport default Application;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__pX6Wt\",\"input\":\"ContactForm_input__pMd-e\",\"addButton\":\"ContactForm_addButton__ciT-z\",\"glowing-button-85\":\"ContactForm_glowing-button-85__A35mE\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","name","setName","number","setNumber","handleInputChange","e","target","value","dispatch","useDispatch","useSelector","getContacts","items","addingLoader","addContactToList","id","find","item","toLocaleLowerCase","contactAlreadyExists","toast","addContact","nameId","nanoid","numberId","onSubmit","preventDefault","className","style","htmlFor","onChange","type","pattern","title","required","Loader","disabled","data","onClick","textContent","setAttribute","deleteContact","onDeleteClick","useEffect","fetchContacts","error","isLoading","filter","getFilter","contactsToRender","includes","map","filterValue","state","filterId","setFilter","currentTarget","toLowerCase","styles","children","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}