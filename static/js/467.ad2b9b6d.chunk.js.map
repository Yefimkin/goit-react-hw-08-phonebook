{"version":3,"file":"static/js/467.ad2b9b6d.chunk.js","mappings":"8OAmFA,UA3EqB,WACjB,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAACC,GAClB,MAAwBA,EAAEC,OAAlBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MAEd,OAAQT,GACJ,IAAK,WACDC,EAAQQ,GACR,MACJ,IAAK,YACDN,EAASM,GACT,MACJ,IAAK,eACDJ,EAAYI,GAIvB,EAEKC,GAAWC,EAAAA,EAAAA,MACTC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,GAA1BF,UAYFG,GAASC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IACjCC,GAAUF,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAClCE,GAAaH,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAE3C,OACI,kBAAMG,SAfW,SAACb,GAClBA,EAAEc,iBAEFX,GAASY,EAAAA,EAAAA,IAAS,CAAEtB,KAAMA,EAAME,MAAOA,EAAOE,SAAUA,KAExDH,EAAQ,IACRE,EAAS,IACTE,EAAY,GACf,EAOG,WACI,kBAAOkB,UAAWC,EAAAA,EAAAA,MAAaC,QAASV,EAAxC,mBACA,kBACAW,GAAIX,EACJY,KAAK,OACL3B,KAAK,WACLS,MAAOT,EACP4B,SAAUtB,EACVuB,UAAQ,EACRC,YAAY,mBACZP,UAAWC,EAAAA,EAAAA,SACX,kBAAOD,UAAWC,EAAAA,EAAAA,MAAaC,QAASP,EAAxC,oBACJ,kBACIQ,GAAIR,EACJS,KAAK,QACL3B,KAAK,YACLS,MAAOP,EACP0B,SAAUtB,EACVuB,UAAQ,EACRC,YAAY,oBACZP,UAAWC,EAAAA,EAAAA,SACf,kBAAOD,UAAWC,EAAAA,EAAAA,MAAaC,QAASN,EAAxC,uBACA,kBACIO,GAAIP,EACJQ,KAAK,WACL3B,KAAK,eACLS,MAAOL,EACPwB,SAAUtB,EACVuB,UAAQ,EACRC,YAAY,uBACZP,UAAWC,EAAAA,EAAAA,QACbZ,GAA8E,SAAC,IAAD,KAAlE,mBAAQe,KAAK,SAASJ,UAAWC,EAAAA,EAAAA,OAAjC,uBAGrB,C,qBCjFD,KAAgB,KAAO,0BAA0B,MAAQ,2BAA2B,UAAY,+BAA+B,oBAAoB,uC,wDCA5I,IAkBIP,EAAS,eAACc,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACT,EAAIU,GAWvD,OAREV,IAFFU,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Application/RegisterForm/RegisterForm.js","webpack://goit-react-hw-08-phonebook/./src/components/Application/ContactForm/ContactForm.module.css?0294","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { getAuthentication } from 'redux/authentication/authenticationSlice';\nimport { register } from 'redux/authentication/authenticationOperation'\nimport { Loader } from '../Loader/Loader'\nimport style from '../ContactForm/ContactForm.module.css';\n\nconst RegisterForm = () => {\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        \n        switch (name) {\n            case 'userName':\n                setName(value)\n                break;\n            case 'userEmail':\n                setEmail(value)\n                break;\n            case 'userPassword':\n                setPassword(value)\n                break;\n            default:\n        }\n    }\n\n    const dispatch = useDispatch();\n    const { isLoading } = useSelector(getAuthentication);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        dispatch(register({ name: name, email: email, password: password }));\n\n        setName('')\n        setEmail('')\n        setPassword('')\n    }\n\n    const nameId = useMemo(() => nanoid(), []);\n    const emailId = useMemo(() => nanoid(), []);\n    const passwordId = useMemo(() => nanoid(), []);\n    \n    return (\n        <form onSubmit={handleSubmit}>\n            <label className={style.label} htmlFor={nameId}>Name</label>\n            <input\n            id={nameId}\n            type=\"text\"\n            name=\"userName\"\n            value={name}\n            onChange={handleChange}\n            required\n            placeholder='Choose your Name'\n            className={style.input}/>\n            <label className={style.label} htmlFor={emailId}>Email</label>\n        <input\n            id={emailId}\n            type=\"email\"\n            name=\"userEmail\"\n            value={email}\n            onChange={handleChange}\n            required\n            placeholder='Choose your Email'\n            className={style.input} />\n        <label className={style.label} htmlFor={passwordId}>Password</label>\n        <input\n            id={passwordId}\n            type=\"password\"\n            name=\"userPassword\"\n            value={password}\n            onChange={handleChange}\n            required\n            placeholder='Choose your Password'\n            className={style.input} />\n        {!isLoading ? <button type='submit' className={style.button}>Sign Up</button> : <Loader />}\n        </form>\n    )\n}\nexport default RegisterForm;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__pX6Wt\",\"input\":\"ContactForm_input__pMd-e\",\"addButton\":\"ContactForm_addButton__ciT-z\",\"glowing-button-85\":\"ContactForm_glowing-button-85__A35mE\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","name","setName","email","setEmail","password","setPassword","handleChange","e","target","value","dispatch","useDispatch","isLoading","useSelector","getAuthentication","nameId","useMemo","nanoid","emailId","passwordId","onSubmit","preventDefault","register","className","style","htmlFor","id","type","onChange","required","placeholder","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}